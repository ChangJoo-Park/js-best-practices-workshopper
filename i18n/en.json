{
  "title": "JAVASCRIPT BEST PRACTICES",
  "subtitle": "\u001b[23mSelect an exercise and hit \u001b[3mEnter\u001b[23m to begin",
  "menu": {
    "credits": "CREDITS",
    "init": "INITIALIZE WORKING DIRECTORY",
    "quiz": "Final Exam"
  },
  "exercise": {
    "get started": "Start here",
    "decompose balanceManager": "Separation of Concerns 1",
    "decompose changeHandler": "Separation of Concerns 2",
    "decompose productInventory": "Separation of Concerns 3",
    "file stream": "Getting Rid of Switch Statements",
    "tdd": "Test Driven Development",
    "bad practices": "Fix Your Teammates' Mistakes",
    "verify vendingMachine": "Verify Your Full Vending Machine Implementation"
  },
  "quizzes": {
    "first": {
      "title": "First Quiz",
      "questions": [{
        "question": "What is your favorite color?",
        "answers": [
          ["Red", "Correct. Red is the best color."],
          ["Yellow", "Wrong. Everyone knows Red is best."],
          ["Blue", "Failure. Go stare at a Red wall and discover it is the best color."],
          ["Other", "Nope. Red was the obvious winner."]
        ]
      }]
    },
    "second": {
      "title": "Best Practices Quiz",
      "questions": [{
          "question": "Which of the following variable declarations will properly create a string in JavaScript?",
          "answers": [
            ["var message = \"Choice A.\";", "False. Both will properly create a string. Just ensure you choose one way and remain consistent throughout your project."],
            ["var message = 'Choice B.';", "Both will properly create a string. Just ensure you choose one way and remain consistent throughout your project."],
            ["Both a) and b) will properly create a string. Just ensure you choose one way and remain consistent throughout your project.", "Correct."]
          ]
        },
        {
          "question": "True or false: The == comparator in JavaScript functions the same way as the === comparator.",
          "answers": [
            ["true", "Wrong. The === comparator requires both types to be the same to be considered equal. == converts types if necessary before equality comparison."],
            ["false", "Right.  The === comparator requires both types to be the same to be considered equal. == converts types if necessary before equality comparison."]
          ]
        },
        {
          "question": "True or false: null === undefined",
          "answers": [
            ["true", "Wrong. Null == undefined is true, but the === operator will pick up the difference between the two."],
            ["false", "Correct! The === operator picks up the difference between the two. Using the == operator instead would make the statement true."]
          ]
        }]
    }
  }
}